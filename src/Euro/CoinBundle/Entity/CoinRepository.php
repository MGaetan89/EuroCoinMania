<?php

namespace Euro\CoinBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CoinRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CoinRepository extends EntityRepository {

	public function findByCountry(array $countries) {
		$queryBuidler = $this->createQueryBuilder('c');
		$expr = $queryBuidler->expr();

		return $queryBuidler
						->select('c, ct, v, y, w')
						->join('c.country', 'ct')
						->join('c.value', 'v')
						->join('c.year', 'y')
						->leftJoin('y.workshop', 'w')
						->where($expr->in('c.country', ':countries'))
						->orderBy('y.year', 'ASC')
						->addOrderBy('w.short_name', 'ASC')
						->addOrderBy('v.value', 'DESC')
						->setParameter('countries', $countries)
						->getQuery()
						->getResult();
	}

	public function findCoinById(array $ids) {
		$queryBuidler = $this->createQueryBuilder('c');
		$expr = $queryBuidler->expr();

		return $queryBuidler
						->select('c, ct, v, y, w')
						->join('c.country', 'ct')
						->join('c.value', 'v')
						->join('c.year', 'y')
						->leftJoin('y.workshop', 'w')
						->where($expr->in('c.id', ':coins'))
						->orderBy('y.year', 'ASC')
						->addOrderBy('w.short_name', 'ASC')
						->addOrderBy('v.value', 'DESC')
						->setParameter('coins', $ids)
						->getQuery()
						->getResult();
	}

	public function findCoinsByCountry(Country $country, $type, array $year) {
		$queryBuidler = $this->createQueryBuilder('c');
		$expr = $queryBuidler->expr();

		return $queryBuidler
						->select('c, i, v, y, w')
						->leftJoin('c.image', 'i')
						->join('c.value', 'v')
						->join('c.year', 'y')
						->leftJoin('y.workshop', 'w')
						->where($expr->eq('c.country', ':country'))
						->andWhere($expr->eq('c.type', ':type'))
						->andWhere($expr->between('y.year', ':year_from', ':year_to'))
						->orderBy('y.year', 'ASC')
						->addOrderBy('w.short_name', 'ASC')
						->addOrderBy('v.value', 'DESC')
						->setParameters(array(
							'country' => $country,
							'type' => $type,
							'year_from' => $year[0],
							'year_to' => isset($year[1]) ? $year[1] : $year[0],
						))
						->getQuery()
						->getResult();
	}

	public function findTopCountries() {
		$queryBuidler = $this->createQueryBuilder('c');
		$expr = $queryBuidler->expr();

		return $queryBuidler
						->select('c, ct, f')
						->addSelect('SUM(c.member_total) AS total')
						->join('c.country', 'ct')
						->join('ct.flag', 'f')
						->groupBy('c.country')
						->having($expr->gt('total', 0))
						->orderBy('total', 'DESC')
						->setMaxResults(10)
						->getQuery()
						->getResult();
	}

	public function findYearsForCountry(Country $country, $type) {
		$queryBuidler = $this->createQueryBuilder('c');
		$expr = $queryBuidler->expr();

		return $queryBuidler
						->select('c, y, w')
						->join('c.year', 'y')
						->leftJoin('y.workshop', 'w')
						->where($expr->eq('c.country', ':country'))
						->andWhere($expr->eq('c.type', ':type'))
						->groupBy('y.year')
						->orderBy('y.year', 'ASC')
						->addOrderBy('w.short_name', 'ASC')
						->setParameters(array(
							'type' => $type,
							'country' => $country,
						))
						->getQuery()
						->getResult();
	}

}
