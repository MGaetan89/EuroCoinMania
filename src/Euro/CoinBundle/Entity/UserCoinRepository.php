<?php

namespace Euro\CoinBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Sonata\UserBundle\Model\UserInterface;

/**
 * UserCoinRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserCoinRepository extends EntityRepository {

	public function findBiggestCollectionStats() {
		$queryBuilder = $this->createQueryBuilder('uc');
		$expr = $queryBuilder->expr();

		return $queryBuilder
						->select('uc, u, SUM(uc.quantity) AS total_coins, COUNT(uc.id) AS total_unique_coins')
						->join('uc.coin', 'c')
						->join('uc.user', 'u')
						->join('c.value', 'v')
						->where($expr->gt('uc.quantity', 0))
						->groupBy('u.id')
						->orderBy('total_unique_coins', 'DESC')
						->addOrderBy('total_coins', 'DESC')
						->setMaxResults(10)
						->getQuery()
						->getResult();
	}

	public function findMostValuedCollectionStats() {
		$queryBuilder = $this->createQueryBuilder('uc');
		$expr = $queryBuilder->expr();

		return $queryBuilder
						->select('uc, u, SUM(uc.quantity * v.value) AS total_value, SUM(v.value) AS total_unique_value')
						->join('uc.coin', 'c')
						->join('uc.user', 'u')
						->join('c.value', 'v')
						->where($expr->gt('uc.quantity', 0))
						->groupBy('u.id')
						->orderBy('total_unique_value', 'DESC')
						->addOrderBy('total_value', 'DESC')
						->setMaxResults(10)
						->getQuery()
						->getResult();
	}

	public function findByCoinsForUser(UserInterface $user, array $coins) {
		$queryBuilder = $this->createQueryBuilder('uc');
		$expr = $queryBuilder->expr();

		return $queryBuilder
						->where($expr->eq('uc.user', ':user'))
						->andWhere($expr->in('uc.coin', ':coins'))
						->setParameters(array(
							'coins' => $coins,
							'user' => $user,
						))
						->getQuery()
						->getResult();
	}

	public function findByUser(UserInterface $user) {
		$queryBuilder = $this->createQueryBuilder('uc');
		$expr = $queryBuilder->expr();

		return $queryBuilder
						->select('uc, c, ct, v, y, w')
						->join('uc.coin', 'c')
						->join('c.country', 'ct')
						->join('c.value', 'v')
						->join('c.year', 'y')
						->leftJoin('y.workshop', 'w')
						->where($expr->eq('uc.user', ':user'))
						->setParameter('user', $user)
						->getQuery()
						->getResult();
	}

	public function findCoinsByUser(UserInterface $user, $type) {
		$queryBuilder = $this->createQueryBuilder('uc');
		$expr = $queryBuilder->expr();

		return $queryBuilder
						->select('uc, c, ct, v, y, w')
						->join('uc.coin', 'c')
						->join('c.country', 'ct')
						->join('c.value', 'v')
						->join('c.year', 'y')
						->leftJoin('y.workshop', 'w')
						->where($expr->eq('uc.user', ':user'))
						->andWhere($expr->eq('c.type', ':type'))
						->andWhere($expr->gt('uc.quantity', 0))
						->orderBy('y.year', 'ASC')
						->addOrderBy('w.short_name', 'ASC')
						->addOrderBy('v.value', 'DESC')
						->setParameters(array(
							'type' => $type,
							'user' => $user,
						))
						->getQuery()
						->getResult();
	}

	public function findDoublesForUser(UserInterface $user) {
		$queryBuilder = $this->createQueryBuilder('uc');
		$expr = $queryBuilder->expr();

		return $queryBuilder
						->select($expr->countDistinct('uc') . ' AS total')
						->addSelect('u.id, u.username, u.email')
						->join('uc.user', 'u')
						->leftJoin('Euro\CoinBundle\Entity\UserCoin', 'uc2', 'WITH', $expr->andX(
										$expr->eq('uc2.user', ':user'), $expr->eq('uc2.coin', 'uc.coin')
								))
						->where($expr->isNull('uc2.user'))
						->andWhere($expr->gt('uc.quantity - uc.sharing', 1))
						->andWhere($expr->eq('u.allow_exchanges', 1))
						->groupBy('u.id')
						->orderBy('total', 'DESC')
						->addOrderBy('u.username', 'ASC')
						->setParameter('user', $user)
						->getQuery()
						->getResult();
	}

	public function findDoublesFromUser(UserInterface $from, UserInterface $user, $type) {
		$queryBuilder = $this->createQueryBuilder('uc');
		$expr = $queryBuilder->expr();

		return $queryBuilder
						->select('uc, c, ct, f, v, y, w')
						->join('uc.coin', 'c')
						->join('c.country', 'ct')
						->join('c.value', 'v')
						->join('c.year', 'y')
						->leftJoin('ct.flag', 'f')
						->leftJoin('y.workshop', 'w')
						->leftJoin('Euro\CoinBundle\Entity\UserCoin', 'uc2', 'WITH', $expr->andX(
										$expr->eq('uc2.user', ':user'), $expr->eq('uc2.coin', 'uc.coin')
								))
						->where($expr->isNull('uc2.user'))
						->andWhere($expr->eq('uc.user', ':from'))
						->andWhere($expr->gt('uc.quantity - uc.sharing', 1))
						->andWhere($expr->eq('c.type', ':type'))
						->orderBy('y.year', 'ASC')
						->addOrderBy('w.short_name', 'ASC')
						->addOrderBy('v.value', 'DESC')
						->setParameters(array(
							'from' => $from,
							'type' => $type,
							'user' => $user,
						))
						->getQuery()
						->getResult();
	}

	public function findDoublesFromUserAndCoins(UserInterface $from, UserInterface $user, array $coins, $type) {
		$queryBuilder = $this->createQueryBuilder('uc');
		$expr = $queryBuilder->expr();

		return $queryBuilder
						->select('uc, c, ct, f, v, y, w')
						->join('uc.coin', 'c')
						->join('c.country', 'ct')
						->join('c.value', 'v')
						->join('c.year', 'y')
						->leftJoin('ct.flag', 'f')
						->leftJoin('y.workshop', 'w')
						->leftJoin('Euro\CoinBundle\Entity\UserCoin', 'uc2', 'WITH', $expr->andX(
										$expr->eq('uc2.user', ':from'), $expr->eq('uc2.coin', 'uc.coin')
								))
						->where($expr->isNull('uc2.user'))
						->andWhere($expr->eq('uc.user', ':user'))
						->andWhere($expr->gt('uc.quantity - uc.sharing', 1))
						->andWhere($expr->notIn('c.id', ':coins'))
						->andWhere($expr->eq('c.type', ':type'))
						->orderBy('y.year', 'ASC')
						->addOrderBy('w.short_name', 'ASC')
						->addOrderBy('v.value', 'DESC')
						->setParameters(array(
							'coins' => $coins,
							'from' => $from,
							'type' => $type,
							'user' => $user,
						))
						->getQuery()
						->getResult();
	}

	public function findForQuery(array $condition, UserInterface $user) {
		$queryBuilder = $this->createQueryBuilder('uc');
		$expr = $queryBuilder->expr();

		$where = $expr->orX();
		foreach ($condition as $coin) {
			$current = $expr->andX();
			foreach ($coin as $param => $value) {
				$current->add($expr->eq('c.' . $param, $value));
			}
			$where->add($current);
		}

		return $queryBuilder
						->select('uc, u')
						->addSelect($expr->count('uc') . ' AS total')
						->join('uc.coin', 'c')
						->join('uc.user', 'u')
						->where($expr->neq('uc.user', ':user'))
						->andWhere($expr->gt('uc.quantity - uc.sharing', 1))
						->andWhere($expr->eq('u.allow_exchanges', 0))
						->andWhere($where)
						->groupBy('uc.user')
						->orderBy('total', 'DESC')
						->setParameter('user', $user)
						->getQuery()
						->getResult();
	}

}
