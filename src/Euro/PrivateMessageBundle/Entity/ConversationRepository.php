<?php

namespace Euro\PrivateMessageBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ConversationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConversationRepository extends EntityRepository {

	public function closeConversation($conversation, $user) {
		$queryBuiler = $this->createQueryBuilder('c');
		$expr = $queryBuiler->expr();

		return $queryBuiler->update()
						->set('c.is_open', '0')
						->where($expr->eq('c.id', ':conversation'))
						->andWhere(
								$expr->orX($expr->eq('c.from_user', ':user'), $expr->eq('c.to_user', ':user'))
						)
						->setParameter('conversation', $conversation)
						->setParameter('user', $user)
						->getQuery()
						->getResult();
	}

	public function getConversationsByUser($user) {
		$queryBuiler = $this->createQueryBuilder('c');
		$expr = $queryBuiler->expr();

		return $queryBuiler
						->join('c.pm', 'pm')
						->where(
								$expr->orX($expr->eq('c.from_user', ':user'), $expr->eq('c.to_user', ':user'))
						)
						->orderBy('pm.post_date', 'DESC')
						->setParameter('user', $user)
						->getQuery()
						->getResult();
	}

	public function getNewMessageCount($user) {
		$queryBuiler = $this->createQueryBuilder('c');
		$expr = $queryBuiler->expr();

		return (int) $queryBuiler
						->select($expr->count('DISTINCT c.id'))
						->where($expr->eq('c.to_user', ':user'))
						->andWhere($expr->eq('c.is_read', '0'))
						->setParameter('user', $user)
						->getQuery()
						->getSingleScalarResult();
	}

	public function setConversationRead($conversation, $user) {
		$queryBuiler = $this->createQueryBuilder('c');
		$expr = $queryBuiler->expr();

		$queryBuiler->update()
				->set('c.is_read', '1')
				->where($expr->eq('c.id', ':conversation'))
				->andWhere($expr->eq('c.to_user', ':user'))
				->setParameter('conversation', $conversation)
				->setParameter('user', $user)
				->getQuery()
				->getResult();
	}

}
